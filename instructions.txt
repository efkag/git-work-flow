git init

Set up intial files for Master branch
----------------------------------------------------------------------------
gedit file_A				#Create file#
git add file_A				#add to traceked files#
git commit -m 'intial commit'		#Commit changes to brach#
	
git remote add origin https://github.com/efkag/git-work-flow.git
git push --set-upstream origin master		#Tells git tat the upstream branch of the local 						branch is the master branch
						then it pushed the commits to the master branch#

Clone repository
----------------------------------------------------------------------------
					#git clone https://github.com/username/the_repo
git clone https://github.com/efkag/git-work-flow.git
cd git-work-flow		 					


Create more files and push to master
---------------------------------------------------------------------------
gedit file_B				#Create more files#
gedit file_C				#Create#
Git add -A				#Add all the new files to git tracking#
git commit -m 'second commit' 		#Commit all the new chnages#
git status				#If you check you can see that you are ahead of origin/master#
git push				#Push the chnages to remote (master)#
	

Creat branch and make feature changes
------------------------------------------------------------------------------
#This assumes that your local master is up to date#
git checkout -b exmp1			#Create new branch exmp1#
(git ls-files				#check that the master branch files exist in the new branch#)
gedit file_A				#edit the file and add more "Hello world" lines#
gedit file_D				#Another new file#
git add -u				#Update the modified file so that have already been tracked#
git add -p				#Add all other files that you created#
git commit -m '3rd commit, 
I modified a file and created a new one'	#Commit the new changes and write a meesage#
git push -u origin exmp1		#Create a new remote branch and push the local update branch 						to it#


Merge new branch with master and push
------------------------------------------------------------------------------
git checkout master			#Change back to master so that you can pull the changes#
git pull				#IMPORTANT-> Pull from master to make sure local is up to 						date#
git pull origin exmp1			#Marge exmp1 into master#
git push				#Push merged changes to master#

Pull request
------------------------------------------------------------------------------
git push origin head
git checkout master
git pull origin master
> If this says no changes, then you're good, else look at how to fix merge conflicts
> Head to https://github.com/username/the_repo and click create pull request where you can make a description/title/other markdown stuffs


Demonstrating git reset (hard-DANGER!, mixed-safe) 
------------------------------------------------------------------------------
git checkout exmp1			#Change to exmp1 branch#
gedit file_B				#Edit file_B, add more "Hello world" lines#
git add -u				#Update the modified file so that have already been tracked#
git reset --hard			#Resets to the last commit. All changes to old and new files 						are discarted#


gedit file_B				#Edit file_B, add more "Hello world" lines#
git add -u				#Update the modified file so that have already been tracked#
git reset --mixed			#Resets to the last commit. All changes to old and new files 						are unstaged i.e you need to excecute git add to stage them 						again.#
git branch -a				#List all branches local, and remote#


Git rebase 
------------------------------------------------------------------------------	
git checkout exmp1
git diff master exmp1
git pull --rebase origin master



(Create ( ͡° ͜ʖ ͡°) and ) Resolve conflicts
------------------------------------------------------------------------------
git checkout -b conflict_demo		#Create an new branch and change to it#
gedit file_B				# Modify file_B (add a new word to the line)#
git commit -am 'Modified file_B'	#Add and commit the new changes with a meesage#
git push -u origin conflict_demo	#Create a new remote branch and push the local branch to it#

git checkout master			#Change back to master (run git status if you like)#
git checkout -b conflict_demo2		#Create a new branch and change to it#
gedit file_B				#Modify file_B (append to the end of the line)
git commit -am 'Modified file_B'	#Add and commit the new changes with a meesage#
git push -u origin conflict_demo2	#Create a new remote branch and push the local branch to it

git checkout master			#Change back to master so that you can pull the changes#
git pull origin conflict_demo		#Merge conflict_demo into master#

git pull origin conflict_demo2		#Merge conflict_demo2 into master (Fails beacause of 						conflict)#

git status				#Check what happened, which files are in conflict#
git checkout conflict_demo2		#Change back to conflict_demo2 to clear the conflict#

cat file_B				#Check the file for the conflict markings#
git diff				#Another command to display modifications and conflicting 						lines#

git reset, git checkout,		#General action to take when confilcts arise i.e merging git merge abort				fails#

gedit file_B				#Edit file_B to resolve the conflict#
git commit -am 'file_B conflict resolved'	#Commit the eddited file to finish the process#








